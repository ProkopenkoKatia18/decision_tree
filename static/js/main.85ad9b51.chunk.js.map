{"version":3,"sources":["utils/binary-search-tree.js","components/Survey.js","utils/fillBinaryTree.js","App.js","index.js"],"names":["Node","data","this","value","question","left","middle","right","leftValue","answers","middleValue","rightValue","parentValue","parentAnswer","BinarySearchTree","root","newNode","insertNode","node","selectedAnswer","currentRoot","previousRoot","setPreviousRoot","setCurrentRoot","setAnswers","setSelections","console","log","prev","selectedQuestion","binaryTree","questions","surveyQuestions","Object","entries","map","object","insert","fillBinaryTree","Survey","useState","setSelectedAnswer","setQuestion","selections","resultAnswer","setResultAnswer","getRoot","errorMessage","setErrorMessage","useEffect","useMemo","className","length","selection","index","name","id","onChange","target","answer","onClick","find","App","started","setStarted","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.85ad9b51.chunk.js","sourcesContent":["class Node {\n    constructor(data) {\n        this.value = data.question; // Question\n        this.left = null;\n        this.middle = null;\n        this.right = null;\n\n        this.leftValue = data?.answers?.left || null;\n        this.middleValue = data?.answers?.middle || null;\n        this.rightValue = data?.answers?.right || null;\n\n        this.parentValue = data.parentAnswer || null;\n    }\n}\n\nclass BinarySearchTree {\n    constructor() {\n        this.root = null;\n    }\n\n    insert(data) {\n        const newNode = new Node(data);\n\n        if (this.root === null) {\n            this.root = newNode;\n        } else {\n            this.insertNode(this.root, newNode);\n        }\n    }\n\n    insertNode(node, newNode) {\n        if (node.leftValue && (newNode.parentValue == node.leftValue)) {\n            node.left = newNode;\n            return;\n        } else if (node.rightValue && (newNode.parentValue == node.rightValue)) {\n            node.right = newNode;\n            return;\n        } else if (node.middleValue && (newNode.parentValue == node.middleValue)) {\n            node.middle = newNode;\n            return;\n        } else {\n            if (node.left) {\n                this.insertNode(node.left, newNode);\n            }\n\n            if (node.right) {\n                this.insertNode(node.right, newNode);\n            }\n\n            if (node.middle) {\n                this.insertNode(node.middle, newNode);\n            }\n\n            return;\n        }\n    }\n\n    getRoot() {\n        return this.root;\n    }\n\n    find(selectedAnswer, currentRoot, previousRoot, setPreviousRoot, setCurrentRoot, setAnswers, setSelections) {\n        if (!this.root) return false;\n\n        console.log('currentRoot', currentRoot);\n        console.log('prevRoot', previousRoot);\n\n        setSelections(prev => [...prev, {selectedQuestion: currentRoot.value, selectedAnswer}]);\n\n        if (selectedAnswer == currentRoot.leftValue) {\n            const value = currentRoot.left;\n            setPreviousRoot(currentRoot);\n            setCurrentRoot(value);\n\n            const answers = [\n                value?.leftValue,\n                value?.middleValue,\n                value?.rightValue,\n            ];\n\n            setAnswers(answers);\n        }\n\n        if (selectedAnswer == currentRoot.rightValue) {\n            const value = currentRoot.right;\n            setCurrentRoot(value);\n\n            const answers = [\n                value?.leftValue,\n                value?.middleValue,\n                value?.rightValue,\n            ];\n\n            setAnswers(answers);\n\n        }\n\n        if (selectedAnswer == currentRoot.middleValue) {\n            const value = currentRoot.middle;\n            setCurrentRoot(value);\n\n            const answers = [\n                value?.leftValue,\n                value?.middleValue,\n                value?.rightValue,\n            ];\n\n            setAnswers(answers);\n        }\n\n        if (selectedAnswer == 'Нету') {\n            const value = previousRoot.middle;\n            setCurrentRoot(value);\n\n            const answers = [\n                value?.leftValue,\n                value?.middleValue,\n                value?.rightValue,\n            ];\n\n            setAnswers(answers);\n        }\n\n        if (selectedAnswer == 'Нет, не достаточно' || selectedAnswer == 'Нет, несколько') {\n            const value = previousRoot.left;\n            setCurrentRoot(value);\n\n            const answers = [\n                value?.leftValue,\n                value?.middleValue,\n                value?.rightValue,\n            ];\n\n            setAnswers(answers);\n        }\n    }\n}\n\nexport default BinarySearchTree;","import React, {useEffect, useMemo, useState} from 'react';\nimport BinarySearchTree from \"../utils/binary-search-tree\";\nimport fillBinaryTree from \"../utils/fillBinaryTree\";\n\nconst binaryTree = new BinarySearchTree();\n\nfillBinaryTree(binaryTree);\n\nconst Survey = () => {\n    const [selectedAnswer, setSelectedAnswer] = useState('');\n    const [question, setQuestion] = useState([]);\n    const [selections, setSelections] = useState([]);\n    const [answers, setAnswers] = useState([]);\n    const [resultAnswer, setResultAnswer] = useState('');\n    const [currentRoot, setCurrentRoot] = useState(binaryTree.getRoot());\n    const [previousRoot, setPreviousRoot] = useState(binaryTree.getRoot());\n    const [errorMessage, setErrorMessage] = useState('');\n\n    useEffect(() => {\n        const answers = [\n            currentRoot?.leftValue,\n            currentRoot?.middleValue,\n            currentRoot?.rightValue,\n        ];\n\n        setAnswers(answers);\n    }, []);\n\n    useMemo(() => {\n        if (!currentRoot.leftValue && !currentRoot.middleValue && !currentRoot.rightValue) {\n            setResultAnswer(currentRoot.value);\n        } else {\n            setQuestion(currentRoot.value);\n        }\n    }, [currentRoot, selectedAnswer]);\n\n    const handleSelectChange = ({target}) => {\n        setSelectedAnswer(target.value);\n        target.value = 'Choose an option';\n    }\n\n    const handleButtonClick = () => {\n        if(selectedAnswer) {\n            binaryTree.find(selectedAnswer, currentRoot, previousRoot, setPreviousRoot, setCurrentRoot, setAnswers, setSelections);\n            setErrorMessage('');\n        } else {\n            setErrorMessage('Пожалуйста, сделайте свой выбор');\n        }\n    }\n\n    return (\n        <>\n            {!resultAnswer ?\n                <div className=\"survey-container\">\n                    <div className=\"survey-question-headline\">{question}</div>\n                    <div className=\"select-control-wrapper\">\n                        <select name=\"\" id=\"\" className=\"select-option\" onChange={handleSelectChange}>\n                            <option value=\"Choose an option\">Choose an option</option>\n                            {answers.map(answer =>\n                                answer && <option key={answer} value={answer}>{answer}</option>\n                            )}\n                        </select>\n                        {errorMessage && <span className=\"error-message\">{errorMessage}</span>}\n                    </div>\n                    <button className=\"questionnaire-start-btn\" onClick={handleButtonClick}>Дальше</button>\n\n                    {!!selections.length &&\n                    <div className=\"answers-tree\">\n                        <h3 className=\"answers-title\">Answers</h3>\n                        <ul className=\"answers-list\">{selections.map(selection =>\n                            <li key={selection.selectedQuestion} className=\"selected-question-list-item\">\n                                <div className=\"answers-container\">\n                                    <strong>Предедущий вопрос:</strong> <span className=\"selected-question-title\">{selection.selectedQuestion}</span>\n                                    <strong>Предедущий ответ:</strong> <span>{selection.selectedAnswer}</span>\n                                </div>\n                            </li>\n                        )}</ul>\n                    </div>\n                    }\n                </div>\n                :\n                <div\n                    className=\"answer\">Основываясь на ваших ответах можем предложить следуещее:\n                    <span>{resultAnswer}</span>\n                    {!!selections.length &&\n                    <div className=\"answers-tree\">\n                        <h3 className=\"answers-title\">Answers</h3>\n                        <ul className=\"answers-list\">{selections.map((selection, index) =>\n                            <li key={index}>\n                                <span>{selection.selectedQuestion}</span> <strong>{selection.selectedAnswer}</strong>\n                            </li>\n                        )}</ul>\n                    </div>\n                    }\n                </div>\n            }\n        </>\n    );\n};\n\nexport default Survey;","import surveyQuestions from '../data/survey-questions.json';\n\nexport default function fillBinaryTree (binaryTree) {\n    const questions = surveyQuestions[0];\n    Object.entries(questions).map(([key, object]) => binaryTree.insert(object));\n}\n","import './App.css';\nimport {useState} from \"react\";\nimport Survey from \"./components/Survey\";\n\nfunction App() {\n    const [started, setStarted] = useState(false);\n    const handleBtnClick = () => setStarted(true);\n\n    return (\n        <div className=\"App\">\n            <div className=\"questionnaire-container\">\n                {!started\n                &&\n                <div className=\"questionnaire-inner\">\n                    <h1 className=\"questionnaire-headline\">Your vacation problem assistant</h1>\n                    <button className=\"questionnaire-start-btn\" onClick={handleBtnClick}>Start</button>\n                </div>\n                }\n                {started && <Survey/>}\n            </div>\n        </div>\n    );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}